<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Vaani Sudha - Voice Recorder</title>
  <style>
    body {
      margin: 0;
      font-family: 'Segoe UI', sans-serif;
      background-color: #fdf3e4;
    }

    header {
      background-color: #fff;
      padding: 15px 30px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #ccc;
    }

    header h2 {
      margin: 0;
      font-size: 22px;
    }

    nav a {
      margin: 0 10px;
      text-decoration: underline;
      color: black;
      font-weight: 500;
    }

    .profile-icon {
      width: 30px;
      height: 30px;
      border-radius: 50%;
      background: black;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 18px;
    }

    .container {
      display: flex;
      justify-content: space-around;
      margin: 40px;
      flex-wrap: wrap;
    }

    .left-section, .right-section {
      background-color: #fff4e5;
      border-radius: 10px;
      padding: 20px;
      /* box-shadow: 3px 5px 0px #444; */
    }

    .left-section {
      width: 45%;
    }

    .right-section {
      width: 40%;
    }

    .story-box {
      border: 2px solid #000;
      border-radius: 10px;
      padding: 15px;
      height: 180px;
      overflow-y: auto;
      margin-bottom: 20px;
      background: white;
    }

    .toggle-record {
      display: flex;
      align-items: center;
      justify-content: space-between;
      background-color: white;
      border: 2px solid #000;
      border-radius: 15px;
      padding: 10px 20px;
      font-weight: bold;
      font-size: 18px;
      margin-top: 10px;
      box-shadow: 3px 5px 0px #444;
    }

    .toggle-switch {
      width: 50px;
      height: 28px;
      background-color: #48c774; /* green */
      border-radius: 15px;
      position: relative;
      cursor: pointer;
    }

    .toggle-switch::before {
      content: "";
      width: 20px;
      height: 20px;
      background-color: white;
      border-radius: 50%;
      position: absolute;
      top: 4px;
      left: 4px;
      transition: 0.3s;
    }

    .toggle-switch.active::before {
      left: 26px;
    }

    .analyze-btn {
      margin-top: 15px;
      padding: 10px 20px;
      border: 2px solid black;
      border-radius: 10px;
      font-weight: 600;
      background: white;
      cursor: pointer;
    }

    .status-box {
      background-color: #92c9f9;
      padding: 15px;
      border-radius: 10px;
      margin-bottom: 20px;
      height: 250px;
      box-shadow: 3px 5px 0px #444;
    }

    .exercise-btn {
      display: flex;
      align-items: center;
      justify-content: space-between;
      background-color: #fff7e0;
      padding: 15px 20px;
      font-weight: bold;
      border-radius: 10px;
      box-shadow: 3px 5px 0px #444;
      cursor: pointer;
    }

    .exercise-btn i {
      font-weight: bold;
    }

    audio {
      margin-top: 10px;
    }

    .loader {
    border: 4px solid #f3f3f3;
    border-top: 4px solid #000000;
    border-radius: 50%;
    width: 30px;
    height: 30px;
    animation: spin 1s linear infinite;
    margin: 10px auto;
  }

  @keyframes spin {
    0% { transform: rotate(0deg); }
    100% { transform: rotate(360deg); }
  }

  </style>
</head>
<body>
  <header>
    <h2>Vaani Sudha</h2>
    <div>
      <nav>
        <a href="#">Home</a>
        <a href="#">About</a>
        <a href="#">Contact</a>
      </nav>
    </div>
    <div class="profile-icon">üë§</div>
  </header>

  <div class="container">
    <div class="left-section">
      <h2>Read the story</h2>
      <div class="story-box">
        <%= story %>
      </div>

      <div class="toggle-record">
        Start/Stop Recording
        <div id="recordToggle" class="toggle-switch"></div>
      </div>

      <button class="analyze-btn" id="uploadBtn" style="display:none;">Analyze</button>
      <audio id="audioPlayer" controls></audio>
    </div>

    <div class="right-section">
      <div class="status-box">
        <h3>Stutter in your voice:</h3>
        <div id="result">
          Yes: <br>No:
        </div>
      </div>

      <div class="exercise-btn" id="exerciseBtn">
        Suggested Exercises
        <span>‚û°Ô∏è</span>
      </div>
    </div>
  </div>

  <script>
    let mediaRecorder;
    let audioChunks = [];
    let audioBlob;
    let category = null; // ‚¨ÖÔ∏è Move to global scope

    const toggleSwitch = document.getElementById('recordToggle');
    const uploadBtn = document.getElementById('uploadBtn');
    const audioPlayer = document.getElementById('audioPlayer');
    const resultDiv = document.getElementById('result');
    const exerciseBtn = document.getElementById('exerciseBtn');

    toggleSwitch.addEventListener('click', async () => {
    toggleSwitch.classList.toggle('active');

    if (mediaRecorder && mediaRecorder.state === 'recording') {
        mediaRecorder.stop();
        return;
    }

    const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
    mediaRecorder = new MediaRecorder(stream);
    audioChunks = [];

    mediaRecorder.ondataavailable = e => audioChunks.push(e.data);
    mediaRecorder.onstop = () => {
        audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
        const audioUrl = URL.createObjectURL(audioBlob);
        audioPlayer.src = audioUrl;
        uploadBtn.style.display = 'inline-block';
    };

    mediaRecorder.start();
    });

    uploadBtn.addEventListener('click', async () => {
    resultDiv.innerHTML = `<div class="loader"></div>`; // Show loader

    const formData = new FormData();
    formData.append('audio', audioBlob, 'recording.webm');

    try {
      const res = await fetch('/send-audio/<%= id %>', {
        method: 'POST',
        body: formData
      });

      const data = await res.json();
      category = data["category"]; // global

      if (data.error) {
        setTimeout(() => {
          resultDiv.innerHTML = `<p style="color:red;">Error: ${data.error}</p>`;
        }, 5000);
      } else {
        // Start staged graph display
        showGraphsInSequence(data);
      }
    } catch (err) {
      console.log(err);
      setTimeout(() => {
        resultDiv.innerHTML = `<p style="color:red;">Server error. Please try again.</p>`;
      }, 5000);
    }
  });

  function showGraphsInSequence(data) {
    resultDiv.innerHTML = '';

    const steps = [
      {
        heading: "Analyzing Sound Waves Through Time ....",
        image: data.waveformUrl
      },
      {
        heading: "Analyzing Audio Signals with Spectrograms ....",
        image: data.spectrogramUrl
      },
      {
        heading: "Examining Pitch Contours in Sound ....",
        image: data.pitchContourUrl
      }
    ];

    let delay = 0;

    steps.forEach((step, index) => {
      setTimeout(() => {
        resultDiv.innerHTML = `<h4>${step.heading}</h4><div class="loader"></div>`;
      }, delay);

      delay += 5000;

      setTimeout(() => {
        resultDiv.innerHTML = `
          <h4>${step.heading}</h4>
          <img src="${step.image}" width="300" style="margin-bottom: 20px;" />
        `;
      }, delay);

      delay += 5000;
    });

    // Final result
    setTimeout(() => {
      resultDiv.innerHTML = `
        <p><strong>Yes (Stutter):</strong> ${data["Yes (%)"]}%<br>
        <strong>Category:</strong> ${data["category"]}</p>
      `;
    }, delay);
  }

    // ‚úÖ Bind the button once, then check category inside
    exerciseBtn.addEventListener('click', async () => {
    if (category == null) {
        alert("Please analyze your audio first.");
        return;
    }

    try {
        window.location.href = `/get-exercises/<%= id %>?category=${encodeURIComponent(category)}`;

    } catch (err) {
        alert("Failed to fetch exercises.");
    }
    });


  </script>
</body>
</html>
