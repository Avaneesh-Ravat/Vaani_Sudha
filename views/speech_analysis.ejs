<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Vaani Sudha - Voice Recorder</title>
  <link rel="stylesheet" href="/speech_analysis.css">
</head>
<body>
  <header>
    <div class="left-nav">
      <img class="logo" src="/images/vaanisudha_logo.jpeg" alt="logo">
      <h2>Vaani Sudha</h2>
    </div>
    <div>
      <nav>
        <a href="/dashboard/<%= id %>">Home</a>
        <a href="/about">About</a>
        <a href="/feedback/<%= id %>">Feedback</a>
        <a href="/">Log out</a>
      </nav>
    </div>
  </header>

  <div class="container">
    <div class="left-section">
      <h2>Read the story</h2>
      <div class="story-box">
        <%= story %>
      </div>

      <div class="toggle-record">
        Start/Stop Recording
        <div id="recordToggle" class="toggle-switch"></div>
      </div>

      <p id="recording-indicator"></p>

      <button class="analyze-btn" id="uploadBtn" style="display:none;">Analyze</button>
      <audio id="audioPlayer" controls></audio>
    </div>

    <div class="right-section">
      <% if (lastResult) { %>
        <div class="last-result">
          <h3>Last result: </h3>
          <h3 class="result"><%= lastResult.speechQuality %></h3>
        </div>
      <% } %>
      
      <div class="status-box">
        <h3>Stutter in your voice:</h3>
        <div id="result">
          Yes: <br>No:
        </div>
      </div>

      <div class="exercise-btn" id="exerciseBtn">
        Suggested Exercises
        <span>➡️</span>
      </div>

      <div class="pronounce-box">
        <h3>Your pronounciation:</h3>
        <div id="pronounce">
          
        </div>
      </div>
    </div>
  </div>

  <script>
    let mediaRecorder;
    let audioChunks = [];
    let audioBlob;
    let category = null;
  
    let recognition;
    let recognizing = false;
    let wordSpans;
    let currentWordIndex = 0; // NEW: Track current word index
  
    const toggleSwitch = document.getElementById('recordToggle');
    const uploadBtn = document.getElementById('uploadBtn');
    const audioPlayer = document.getElementById('audioPlayer');
    const resultDiv = document.getElementById('result');
    const exerciseBtn = document.getElementById('exerciseBtn');
    const recoIndicator = document.getElementById('recording-indicator');
  
    const storyBox = document.querySelector('.story-box');
    const originalText = storyBox.innerText.trim();
    const words = originalText.split(' ').map(word => `<span>${word}</span>`).join(' ');
    storyBox.innerHTML = words;
  
    toggleSwitch.addEventListener('click', async () => {
      toggleSwitch.classList.toggle('active');
  
      if (mediaRecorder && mediaRecorder.state === 'recording') {
          mediaRecorder.stop();
          if (recognition && recognizing) recognition.stop();
          recoIndicator.innerText = "";
          return;
      }
  
      const stream = await navigator.mediaDevices.getUserMedia({ audio: true });
      mediaRecorder = new MediaRecorder(stream);
      audioChunks = [];
  
      mediaRecorder.ondataavailable = e => audioChunks.push(e.data);
      mediaRecorder.onstop = () => {
          audioBlob = new Blob(audioChunks, { type: 'audio/webm' });
          const audioUrl = URL.createObjectURL(audioBlob);
          audioPlayer.src = audioUrl;
          uploadBtn.style.display = 'inline-block';
      };
  
      mediaRecorder.start();
      recoIndicator.innerText = "The voice is getting recorded";

      wordSpans = document.querySelectorAll('.story-box span');
      wordSpans.forEach(span => { span.style.fontWeight = 'normal'; });
      currentWordIndex = 0;
  
      window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      recognition = new SpeechRecognition();
      recognition.lang = 'en-US';
      recognition.interimResults = true;
      recognition.continuous = true;
  
      recognition.onstart = () => recognizing = true;
      recognition.onend = () => recognizing = false;
      recognition.onresult = (event) => {
        const transcript = Array.from(event.results)
          .map(result => result[0])
          .map(result => result.transcript)
          .join(' ')
          .toLowerCase()
          .trim();

        boldNextWord(transcript);
      };
 
  
      recognition.start();
    });

  
    uploadBtn.addEventListener('click', async () => {
      resultDiv.innerHTML = `<div class="loader"></div>`;
      const formData = new FormData();
      formData.append('audio', audioBlob, 'recording.webm');
  
      try {
        const res = await fetch('/send-audio/<%= id %>', { method: 'POST', body: formData });
        const data = await res.json();
        category = data["category"];
  
        if (data.error) {
          setTimeout(() => { resultDiv.innerHTML = `<p style="color:red;">Error: ${data.error}</p>`; }, 5000);
        } else {
          showGraphsInSequence(data);
        }
      } catch (err) {
        console.log(err);
        setTimeout(() => { resultDiv.innerHTML = `<p style="color:red;">Server error. Please try again.</p>`; }, 5000);
      }
    });
  
    function showGraphsInSequence(data) {
      resultDiv.innerHTML = '';
      const steps = [
        { heading: "Analyzing Sound Waves Through Time ....", image: data.waveformUrl },
        { heading: "Analyzing Audio Signals with Spectrograms ....", image: data.spectrogramUrl },
        { heading: "Examining Pitch Contours in Sound ....", image: data.pitchContourUrl }
      ];
  
      let delay = 0;
  
      steps.forEach((step, index) => {
        setTimeout(() => { resultDiv.innerHTML = `<h4>${step.heading}</h4><div class="loader"></div>`; }, delay);
        delay += 5000;
        setTimeout(() => {
          resultDiv.innerHTML = `<h4>${step.heading}</h4><img src="${step.image}" width="300" style="margin-bottom: 20px;" />`;
        }, delay);
        delay += 5000;
      });
  
      setTimeout(() => {
        resultDiv.innerHTML = `<p><strong>Yes (Stutter):</strong> ${data["Yes (%)"]}%<br><strong>Category:</strong> ${data["category"]}</p>`;
          // Render pronunciation feedback
          // console.log(data.comparison)
        if (data.comparison) {
          renderPronounceBox(data.comparison);
        }
      }, delay);
    }
  
    exerciseBtn.addEventListener('click', async () => {
      if (category == null) {
        alert("Please analyze your audio first.");
        return;
      }
      try {
        window.location.href = `/get-exercises/<%= id %>?category=${encodeURIComponent(category)}`;
      } catch (err) {
        alert("Failed to fetch exercises.");
      }
    });
  
    let lastBoldTime = 0;
    const boldDelay = 250; // milliseconds between bolding words

    function boldNextWord(transcript) {
      const now = Date.now();
      
      if (currentWordIndex < wordSpans.length && now - lastBoldTime >= boldDelay) {
        wordSpans[currentWordIndex].style.fontWeight = 'bold';
        currentWordIndex++;
        lastBoldTime = now;
      }
    }

    function renderPronounceBox(comparisonArray) {
      const pronounceDiv = document.getElementById("pronounce");
      pronounceDiv.innerHTML = ''; // Clear previous content

      comparisonArray.forEach(item => {
        const span = document.createElement("span");
        span.innerText = item.word + ' ';
        console.log(item.type);
        if (item.type === 'match') {
          span.style.color = 'green';
        } else if (item.type === 'replace') {
          span.style.color = 'red';
        } else if (item.type === 'missing') {
          span.style.color = 'gray';
        }
        pronounceDiv.appendChild(span);
      });
    }

  </script>
  </body>
</html>