<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <title>Vaani Sudha - Voice Recorder</title>
  <style>
    body {
      margin: 0;
      font-family: 'Segoe UI', sans-serif;
      background-color: #fdf3e4;
    }

    header {
      background-color: #fff;
      padding: 15px 30px;
      display: flex;
      justify-content: space-between;
      align-items: center;
      border-bottom: 1px solid #ccc;
    }

    header h2 {
      margin: 0;
      font-size: 22px;
    }

    nav a {
      margin: 0 10px;
      text-decoration: underline;
      color: black;
      font-weight: 500;
    }

    .profile-icon {
      width: 30px;
      height: 30px;
      border-radius: 50%;
      background: black;
      display: flex;
      align-items: center;
      justify-content: center;
      color: white;
      font-size: 18px;
    }

    .container {
      display: flex;
      justify-content: space-around;
      margin: 40px;
      flex-wrap: wrap;
    }

    .left-section, .right-section {
      background-color: #fff4e5;
      border-radius: 10px;
      padding: 20px;
    }

    .left-section {
      width: 45%;
    }

    .right-section {
      width: 40%;
    }

    .story-box {
      border: 2px solid #000;
      border-radius: 10px;
      padding: 15px;
      height: 180px;
      overflow-y: auto;
      margin-bottom: 20px;
      background: white;
      font-size: 18px;
      line-height: 1.6;
    }

    .toggle-record {
      display: flex;
      align-items: center;
      justify-content: space-between;
      background-color: white;
      border: 2px solid #000;
      border-radius: 15px;
      padding: 10px 20px;
      font-weight: bold;
      font-size: 18px;
      margin-top: 10px;
      box-shadow: 3px 5px 0px #444;
      cursor: pointer;
    }

    .toggle-switch {
      width: 50px;
      height: 28px;
      background-color: #ccc;
      border-radius: 15px;
      position: relative;
      margin-left: 10px;
      transition: background-color 0.3s;
    }

    .toggle-switch::before {
      content: "";
      width: 20px;
      height: 20px;
      background-color: white;
      border-radius: 50%;
      position: absolute;
      top: 4px;
      left: 4px;
      transition: left 0.3s;
    }

    .toggle-switch.active {
      background-color: #48c774;
    }

    .toggle-switch.active::before {
      left: 26px;
    }

    .analyze-btn {
      margin-top: 15px;
      padding: 10px 20px;
      border: 2px solid black;
      border-radius: 10px;
      font-weight: 600;
      background: white;
      cursor: pointer;
      display: none; /* hidden initially */
    }

    .status-box {
      background-color: #ffffff;
      padding: 15px;
      border-radius: 10px;
      margin-bottom: 20px;
      height: 250px;
      box-shadow: 3px 5px 0px #444;
    }

    .exercise-btn {
      display: flex;
      align-items: center;
      justify-content: space-between;
      background-color: #fff7e0;
      padding: 15px 20px;
      font-weight: bold;
      border-radius: 10px;
      box-shadow: 3px 5px 0px #444;
      cursor: pointer;
    }

    .loader {
      border: 4px solid #f3f3f3;
      border-top: 4px solid #000000;
      border-radius: 50%;
      width: 30px;
      height: 30px;
      animation: spin 1s linear infinite;
      margin: 10px auto;
    }

    @keyframes spin {
      0% { transform: rotate(0deg); }
      100% { transform: rotate(360deg); }
    }

    .highlighted {
      font-weight: bold;
      color: #d35400;
    }
  </style>
</head>
<body>

<header>
  <h2>Vaani Sudha</h2>
  <div>
    <nav>
      <a href="#">Home</a>
      <a href="#">About</a>
      <a href="#">Contact</a>
    </nav>
  </div>
</header>

<div class="container">
  <div class="left-section">
    <h2>Read the story</h2>
    <div class="story-box" id="storyBox">
      <!-- SERVER RENDERED -->
      <p id="storyParagraph">
        <%= storyContent %> <!-- You are sending this from backend -->
      </p>
    </div>

    <div class="toggle-record" id="startReading">
      Start Reading
      <div class="toggle-switch" id="toggleSwitch"></div>
    </div>

    <button class="analyze-btn" id="analyzeBtn">Analyze Recording</button>

    <audio id="audioPlayer" controls style="display:none;"></audio>
  </div>

  <div class="right-section">
    <div class="status-box">
      <h3>Stutter in your voice:</h3>
      <div id="result">
        Yes: <br>No:
      </div>
    </div>

    <div class="exercise-btn" id="exerciseBtn">
      Suggested Exercises
      <span>➡️</span>
    </div>
  </div>
</div>

<script>
  const startReading = document.getElementById('startReading');
  const toggleSwitch = document.getElementById('toggleSwitch');
  const analyzeBtn = document.getElementById('analyzeBtn');
  const storyParagraph = document.getElementById('storyParagraph');

  let recognition;
  let words = [];

  // Prepare words after DOM loaded
  function prepareStory() {
    const text = storyParagraph.innerText;
    const splitWords = text.split(/\s+/);
    storyParagraph.innerHTML = splitWords.map(word => `<span>${word}</span>`).join(' ');
    words = Array.from(storyParagraph.querySelectorAll('span'));
  }

  prepareStory();

  // Setup Speech Recognition
  window.SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
  if (!window.SpeechRecognition) {
    alert("Speech Recognition not supported in your browser!");
  } else {
    recognition = new SpeechRecognition();
    recognition.continuous = true;
    recognition.interimResults = true;
    recognition.lang = 'en-US';
  }

  let currentWordIndex = 0;
  let isRecording = false;

  startReading.addEventListener('click', () => {
    if (!recognition) return;

    if (isRecording) {
      recognition.stop();
      toggleSwitch.classList.remove('active');
      startReading.firstChild.nodeValue = 'Start Reading';
      analyzeBtn.style.display = 'block'; // Show Analyze button after recording stops
      isRecording = false;
    } else {
      recognition.start();
      toggleSwitch.classList.add('active');
      startReading.firstChild.nodeValue = 'Stop Reading';
      analyzeBtn.style.display = 'none';
      isRecording = true;
    }
  });

  recognition.addEventListener('result', e => {
    const transcript = Array.from(e.results)
      .map(result => result[0])
      .map(result => result.transcript)
      .join('')
      .toLowerCase();

    const spokenWords = transcript.split(/\s+/);

    if (currentWordIndex < words.length) {
      const currentSpan = words[currentWordIndex];
      const expectedWord = currentSpan.innerText.replace(/[^\w]/g, '').toLowerCase();

      if (spokenWords.includes(expectedWord)) {
        currentSpan.classList.add('highlighted');
        currentWordIndex++;
      }
    }
  });

  recognition.addEventListener('end', () => {
    if (isRecording) {
      recognition.start(); // restart automatically for continuous listening
    }
  });

  // Clicking Analyze button
  analyzeBtn.addEventListener('click', () => {
    alert('Analyzing your recording...');
    // Here you can add your analysis function
  });
</script>

</body>
</html>
